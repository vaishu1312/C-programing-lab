#include<stdio.h>
#include<conio.h>
#define MAX_SIZE 100  // Maximum string size
void main()
{
    char str[MAX_SIZE];
    char prevChar;
    int i, words;
    clrscr();
    /* Input string from user */
    printf("\nEnter any string: ");
    gets(str);
    i = 0;
    words = 0;
    prevChar = '\0'; // The previous character of str[0] is null
    /* Runs loop infinite times */
    while(1)
    {
        if(str[i]==' ' || str[i]=='\n' || str[i]=='\t' || str[i]=='\0')
        {
            /**
             * It is a word if current character is whitespace and
             * previous character is non-white space.
             */
            if(prevChar != ' ' && prevChar != '\n' && prevChar != '\t' && prevChar != '\0')
            {
                words++;
            }
        }
        /* Make the current character as previous character */
        prevChar = str[i];

        if(str[i] == '\0')
             break;
        else
             i++;
    }
    printf("Total number of words = %d", words);
    getch();
}

b. Capitalize the first word of each sentence. 

#include<stdio.h>
#include<conio.h>
#define MAX 100
void main()
{
char str[MAX]={0};	
int i;
clrscr();
//input string
printf("Enter a string: ");
scanf("%[^\n]s",str); //read string with spaces
//capitalize first character of words
for(i=0; str[i]!='\0'; i++)
{	
//check first character is lowercase alphabet
if(i==0)
{
if((str[i]>='a' && str[i]<='z'))
str[i]=str[i]-32; //subtract 32 to make it capital
continue; //continue to the loop
}	
if(str[i]==' ')//check space	
{
//if space is found, check next character
++i;
//check next character is lowercase alphabet

if(str[i]>='a' && str[i]<='z')
{
str[i]=str[i]-32; //subtract 32 to make it capital
continue; //continue to the loop
}
}
else
{
//all other uppercase characters should be in lowercase
if(str[i]>='A' && str[i]<='Z')
str[i]=str[i]+32; //subtract 32 to make it small/lowercase
}
}	
printf("Capitalize string is: %s\n",str);
getch();
}

c. Replace a given word with another word.

#include <stdio.h>
#include <string.h>
#include<conio.h>
void main()
{
  char s[] = "All work and no play makes Jack a dull boy.";
  char word[10],rpwrd[10],str[10][10];
  int i=0,j=0,k=0,w,p;
  printf("All work and no play makes Jack a dull boy.\n");
  printf("\nENTER WHICH WORD IS TO BE REPLACED\n");
  scanf("%s",word);
  printf("\nENTER BY WHICH WORD THE %s IS TO BE REPLACED\n",word);
  scanf("%s",rpwrd);
  p=strlen(s);
  for (k=0; k<p; k++)
    {
      if (s[k]!=' ')
        {
          str[i][j] = s[k];
          j++;
        }
      else
        {
          str[i][j]='\0';
          j=0; i++;
        }
    }
  str[i][j]='\0';
  w=i;
  for (i=0; i<=w; i++)
    {
      if(strcmp(str[i],word)==0)
        strcpy(str[i],rpwrd);
      printf("%s ",str[i]);
    }
  getch();
}
////////////////////
Ex 11. From a given paragraph perform the following using built-in functions:
a.  Find the total number of words.
b.  Capitalize the first word of each sentence. 
c.   Replace a given word with another word.
*/

#include "stdio.h"
#include "string.h"
#include "ctype.h"
void replace (char *, char *, char *); 

int main(void) {
  char paragraph[200] = "The quick brown fox\n jumps over\n the lazy dog.";
  char old[10] = "Fox", S[10] = "Lion";
  char word[30], c;
  
  int i = 0, j =0, count = 0;
  printf("***** Given paragraph  *****\n");
  printf("%s \n", paragraph);
  printf("****************************\n");
  while (paragraph[i] != '\0')
  {
    word[j++] = paragraph[i++];
    if (paragraph[i] == ' ' || paragraph[i] == '\n')
    {
      j = 0;
      count++;
      paragraph[i+1] = toupper(paragraph[i+1]);
    };       
  } // end-while
  
  printf("No of words: %d \n", count);
  printf("****************************\n");
  printf("Capitalize each word\n");
  printf("****************************\n");
  printf("%s\n", paragraph);
  printf("****************************\n");
  printf("Replace %s with %s \n\n", old, S);
  printf("****************************\n");
  replace(paragraph, old, S);
  printf("%s\n", paragraph);

  return 0;
}


void replace(char * str, char * s_string, char * r_string) 
{
  //a buffer variable to do all replace things 
  char buffer[200];
  //to store the pointer returned from strstr 
  char * ch;
  
  //first exit condition
  if(!(ch = strstr(str, s_string))) return;
  
  //copy all the content to buffer before the first occurrence of the search string 
  strncpy(buffer, str, ch-str);
  
  //prepare the buffer for appending by adding a null to the end of it
   
  buffer[ch-str] = 0;
  
  //append using sprintf function
  sprintf(buffer+(ch -str), "%s%s", r_string, ch + strlen(s_string));
  
  //empty str for copying 
  str[0] = 0;
  strcpy(str, buffer);
  //pass recursively to replace other occurrences 
  return replace(str, s_string, r_string);
}
///////////////////////////////////
